//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18444.
// 
#pragma warning disable 1591

namespace CamlDesigner.DataAccess.SharePoint.WebServices.UserGroupWebService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="UserGroupSoap", Namespace="http://schemas.microsoft.com/sharepoint/soap/directory/")]
    public partial class UserGroup : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetUserCollectionFromSiteOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserCollectionFromWebOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllUserCollectionFromWebOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserCollectionFromGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserCollectionFromRoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserCollectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCurrentUserInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddUserToGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddUserCollectionToGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddUserToRoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddUserCollectionToRoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateUserInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveUserFromSiteOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveUserCollectionFromSiteOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveUserFromWebOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveUserFromGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveUserCollectionFromGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveUserFromRoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveUserCollectionFromRoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetGroupCollectionFromSiteOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetGroupCollectionFromWebOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetGroupCollectionFromRoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetGroupCollectionFromUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetGroupCollectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetGroupInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddGroupToRoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateGroupInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveGroupFromRoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRoleCollectionFromWebOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRoleCollectionFromGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRoleCollectionFromUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRoleCollectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRoleInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddRoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddRoleDefOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateRoleInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateRoleDefInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveRoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserLoginFromEmailOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRolesAndPermissionsForCurrentUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRolesAndPermissionsForSiteOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public UserGroup() {
            this.Url = global::CamlDesigner.DataAccess.SharePoint.WebServices.Properties.Settings.Default.CamlDesigner_DataAccess_SharePoint_WebServices_UserGroupWebService_UserGroup;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetUserCollectionFromSiteCompletedEventHandler GetUserCollectionFromSiteCompleted;
        
        /// <remarks/>
        public event GetUserCollectionFromWebCompletedEventHandler GetUserCollectionFromWebCompleted;
        
        /// <remarks/>
        public event GetAllUserCollectionFromWebCompletedEventHandler GetAllUserCollectionFromWebCompleted;
        
        /// <remarks/>
        public event GetUserCollectionFromGroupCompletedEventHandler GetUserCollectionFromGroupCompleted;
        
        /// <remarks/>
        public event GetUserCollectionFromRoleCompletedEventHandler GetUserCollectionFromRoleCompleted;
        
        /// <remarks/>
        public event GetUserCollectionCompletedEventHandler GetUserCollectionCompleted;
        
        /// <remarks/>
        public event GetUserInfoCompletedEventHandler GetUserInfoCompleted;
        
        /// <remarks/>
        public event GetCurrentUserInfoCompletedEventHandler GetCurrentUserInfoCompleted;
        
        /// <remarks/>
        public event AddUserToGroupCompletedEventHandler AddUserToGroupCompleted;
        
        /// <remarks/>
        public event AddUserCollectionToGroupCompletedEventHandler AddUserCollectionToGroupCompleted;
        
        /// <remarks/>
        public event AddUserToRoleCompletedEventHandler AddUserToRoleCompleted;
        
        /// <remarks/>
        public event AddUserCollectionToRoleCompletedEventHandler AddUserCollectionToRoleCompleted;
        
        /// <remarks/>
        public event UpdateUserInfoCompletedEventHandler UpdateUserInfoCompleted;
        
        /// <remarks/>
        public event RemoveUserFromSiteCompletedEventHandler RemoveUserFromSiteCompleted;
        
        /// <remarks/>
        public event RemoveUserCollectionFromSiteCompletedEventHandler RemoveUserCollectionFromSiteCompleted;
        
        /// <remarks/>
        public event RemoveUserFromWebCompletedEventHandler RemoveUserFromWebCompleted;
        
        /// <remarks/>
        public event RemoveUserFromGroupCompletedEventHandler RemoveUserFromGroupCompleted;
        
        /// <remarks/>
        public event RemoveUserCollectionFromGroupCompletedEventHandler RemoveUserCollectionFromGroupCompleted;
        
        /// <remarks/>
        public event RemoveUserFromRoleCompletedEventHandler RemoveUserFromRoleCompleted;
        
        /// <remarks/>
        public event RemoveUserCollectionFromRoleCompletedEventHandler RemoveUserCollectionFromRoleCompleted;
        
        /// <remarks/>
        public event GetGroupCollectionFromSiteCompletedEventHandler GetGroupCollectionFromSiteCompleted;
        
        /// <remarks/>
        public event GetGroupCollectionFromWebCompletedEventHandler GetGroupCollectionFromWebCompleted;
        
        /// <remarks/>
        public event GetGroupCollectionFromRoleCompletedEventHandler GetGroupCollectionFromRoleCompleted;
        
        /// <remarks/>
        public event GetGroupCollectionFromUserCompletedEventHandler GetGroupCollectionFromUserCompleted;
        
        /// <remarks/>
        public event GetGroupCollectionCompletedEventHandler GetGroupCollectionCompleted;
        
        /// <remarks/>
        public event GetGroupInfoCompletedEventHandler GetGroupInfoCompleted;
        
        /// <remarks/>
        public event AddGroupCompletedEventHandler AddGroupCompleted;
        
        /// <remarks/>
        public event AddGroupToRoleCompletedEventHandler AddGroupToRoleCompleted;
        
        /// <remarks/>
        public event UpdateGroupInfoCompletedEventHandler UpdateGroupInfoCompleted;
        
        /// <remarks/>
        public event RemoveGroupCompletedEventHandler RemoveGroupCompleted;
        
        /// <remarks/>
        public event RemoveGroupFromRoleCompletedEventHandler RemoveGroupFromRoleCompleted;
        
        /// <remarks/>
        public event GetRoleCollectionFromWebCompletedEventHandler GetRoleCollectionFromWebCompleted;
        
        /// <remarks/>
        public event GetRoleCollectionFromGroupCompletedEventHandler GetRoleCollectionFromGroupCompleted;
        
        /// <remarks/>
        public event GetRoleCollectionFromUserCompletedEventHandler GetRoleCollectionFromUserCompleted;
        
        /// <remarks/>
        public event GetRoleCollectionCompletedEventHandler GetRoleCollectionCompleted;
        
        /// <remarks/>
        public event GetRoleInfoCompletedEventHandler GetRoleInfoCompleted;
        
        /// <remarks/>
        public event AddRoleCompletedEventHandler AddRoleCompleted;
        
        /// <remarks/>
        public event AddRoleDefCompletedEventHandler AddRoleDefCompleted;
        
        /// <remarks/>
        public event UpdateRoleInfoCompletedEventHandler UpdateRoleInfoCompleted;
        
        /// <remarks/>
        public event UpdateRoleDefInfoCompletedEventHandler UpdateRoleDefInfoCompleted;
        
        /// <remarks/>
        public event RemoveRoleCompletedEventHandler RemoveRoleCompleted;
        
        /// <remarks/>
        public event GetUserLoginFromEmailCompletedEventHandler GetUserLoginFromEmailCompleted;
        
        /// <remarks/>
        public event GetRolesAndPermissionsForCurrentUserCompletedEventHandler GetRolesAndPermissionsForCurrentUserCompleted;
        
        /// <remarks/>
        public event GetRolesAndPermissionsForSiteCompletedEventHandler GetRolesAndPermissionsForSiteCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetUserCollectionFromSite", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetUserCollectionFromSite() {
            object[] results = this.Invoke("GetUserCollectionFromSite", new object[0]);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserCollectionFromSiteAsync() {
            this.GetUserCollectionFromSiteAsync(null);
        }
        
        /// <remarks/>
        public void GetUserCollectionFromSiteAsync(object userState) {
            if ((this.GetUserCollectionFromSiteOperationCompleted == null)) {
                this.GetUserCollectionFromSiteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserCollectionFromSiteOperationCompleted);
            }
            this.InvokeAsync("GetUserCollectionFromSite", new object[0], this.GetUserCollectionFromSiteOperationCompleted, userState);
        }
        
        private void OnGetUserCollectionFromSiteOperationCompleted(object arg) {
            if ((this.GetUserCollectionFromSiteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserCollectionFromSiteCompleted(this, new GetUserCollectionFromSiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetUserCollectionFromWeb", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetUserCollectionFromWeb() {
            object[] results = this.Invoke("GetUserCollectionFromWeb", new object[0]);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserCollectionFromWebAsync() {
            this.GetUserCollectionFromWebAsync(null);
        }
        
        /// <remarks/>
        public void GetUserCollectionFromWebAsync(object userState) {
            if ((this.GetUserCollectionFromWebOperationCompleted == null)) {
                this.GetUserCollectionFromWebOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserCollectionFromWebOperationCompleted);
            }
            this.InvokeAsync("GetUserCollectionFromWeb", new object[0], this.GetUserCollectionFromWebOperationCompleted, userState);
        }
        
        private void OnGetUserCollectionFromWebOperationCompleted(object arg) {
            if ((this.GetUserCollectionFromWebCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserCollectionFromWebCompleted(this, new GetUserCollectionFromWebCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetAllUserCollectionFromWe" +
            "b", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetAllUserCollectionFromWeb() {
            object[] results = this.Invoke("GetAllUserCollectionFromWeb", new object[0]);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllUserCollectionFromWebAsync() {
            this.GetAllUserCollectionFromWebAsync(null);
        }
        
        /// <remarks/>
        public void GetAllUserCollectionFromWebAsync(object userState) {
            if ((this.GetAllUserCollectionFromWebOperationCompleted == null)) {
                this.GetAllUserCollectionFromWebOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllUserCollectionFromWebOperationCompleted);
            }
            this.InvokeAsync("GetAllUserCollectionFromWeb", new object[0], this.GetAllUserCollectionFromWebOperationCompleted, userState);
        }
        
        private void OnGetAllUserCollectionFromWebOperationCompleted(object arg) {
            if ((this.GetAllUserCollectionFromWebCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllUserCollectionFromWebCompleted(this, new GetAllUserCollectionFromWebCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetUserCollectionFromGroup" +
            "", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetUserCollectionFromGroup(string groupName) {
            object[] results = this.Invoke("GetUserCollectionFromGroup", new object[] {
                        groupName});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserCollectionFromGroupAsync(string groupName) {
            this.GetUserCollectionFromGroupAsync(groupName, null);
        }
        
        /// <remarks/>
        public void GetUserCollectionFromGroupAsync(string groupName, object userState) {
            if ((this.GetUserCollectionFromGroupOperationCompleted == null)) {
                this.GetUserCollectionFromGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserCollectionFromGroupOperationCompleted);
            }
            this.InvokeAsync("GetUserCollectionFromGroup", new object[] {
                        groupName}, this.GetUserCollectionFromGroupOperationCompleted, userState);
        }
        
        private void OnGetUserCollectionFromGroupOperationCompleted(object arg) {
            if ((this.GetUserCollectionFromGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserCollectionFromGroupCompleted(this, new GetUserCollectionFromGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetUserCollectionFromRole", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetUserCollectionFromRole(string roleName) {
            object[] results = this.Invoke("GetUserCollectionFromRole", new object[] {
                        roleName});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserCollectionFromRoleAsync(string roleName) {
            this.GetUserCollectionFromRoleAsync(roleName, null);
        }
        
        /// <remarks/>
        public void GetUserCollectionFromRoleAsync(string roleName, object userState) {
            if ((this.GetUserCollectionFromRoleOperationCompleted == null)) {
                this.GetUserCollectionFromRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserCollectionFromRoleOperationCompleted);
            }
            this.InvokeAsync("GetUserCollectionFromRole", new object[] {
                        roleName}, this.GetUserCollectionFromRoleOperationCompleted, userState);
        }
        
        private void OnGetUserCollectionFromRoleOperationCompleted(object arg) {
            if ((this.GetUserCollectionFromRoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserCollectionFromRoleCompleted(this, new GetUserCollectionFromRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetUserCollection", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetUserCollection(System.Xml.XmlNode userLoginNamesXml) {
            object[] results = this.Invoke("GetUserCollection", new object[] {
                        userLoginNamesXml});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserCollectionAsync(System.Xml.XmlNode userLoginNamesXml) {
            this.GetUserCollectionAsync(userLoginNamesXml, null);
        }
        
        /// <remarks/>
        public void GetUserCollectionAsync(System.Xml.XmlNode userLoginNamesXml, object userState) {
            if ((this.GetUserCollectionOperationCompleted == null)) {
                this.GetUserCollectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserCollectionOperationCompleted);
            }
            this.InvokeAsync("GetUserCollection", new object[] {
                        userLoginNamesXml}, this.GetUserCollectionOperationCompleted, userState);
        }
        
        private void OnGetUserCollectionOperationCompleted(object arg) {
            if ((this.GetUserCollectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserCollectionCompleted(this, new GetUserCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetUserInfo", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetUserInfo(string userLoginName) {
            object[] results = this.Invoke("GetUserInfo", new object[] {
                        userLoginName});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserInfoAsync(string userLoginName) {
            this.GetUserInfoAsync(userLoginName, null);
        }
        
        /// <remarks/>
        public void GetUserInfoAsync(string userLoginName, object userState) {
            if ((this.GetUserInfoOperationCompleted == null)) {
                this.GetUserInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserInfoOperationCompleted);
            }
            this.InvokeAsync("GetUserInfo", new object[] {
                        userLoginName}, this.GetUserInfoOperationCompleted, userState);
        }
        
        private void OnGetUserInfoOperationCompleted(object arg) {
            if ((this.GetUserInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserInfoCompleted(this, new GetUserInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetCurrentUserInfo", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetCurrentUserInfo() {
            object[] results = this.Invoke("GetCurrentUserInfo", new object[0]);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetCurrentUserInfoAsync() {
            this.GetCurrentUserInfoAsync(null);
        }
        
        /// <remarks/>
        public void GetCurrentUserInfoAsync(object userState) {
            if ((this.GetCurrentUserInfoOperationCompleted == null)) {
                this.GetCurrentUserInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCurrentUserInfoOperationCompleted);
            }
            this.InvokeAsync("GetCurrentUserInfo", new object[0], this.GetCurrentUserInfoOperationCompleted, userState);
        }
        
        private void OnGetCurrentUserInfoOperationCompleted(object arg) {
            if ((this.GetCurrentUserInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCurrentUserInfoCompleted(this, new GetCurrentUserInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/AddUserToGroup", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddUserToGroup(string groupName, string userName, string userLoginName, string userEmail, string userNotes) {
            this.Invoke("AddUserToGroup", new object[] {
                        groupName,
                        userName,
                        userLoginName,
                        userEmail,
                        userNotes});
        }
        
        /// <remarks/>
        public void AddUserToGroupAsync(string groupName, string userName, string userLoginName, string userEmail, string userNotes) {
            this.AddUserToGroupAsync(groupName, userName, userLoginName, userEmail, userNotes, null);
        }
        
        /// <remarks/>
        public void AddUserToGroupAsync(string groupName, string userName, string userLoginName, string userEmail, string userNotes, object userState) {
            if ((this.AddUserToGroupOperationCompleted == null)) {
                this.AddUserToGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddUserToGroupOperationCompleted);
            }
            this.InvokeAsync("AddUserToGroup", new object[] {
                        groupName,
                        userName,
                        userLoginName,
                        userEmail,
                        userNotes}, this.AddUserToGroupOperationCompleted, userState);
        }
        
        private void OnAddUserToGroupOperationCompleted(object arg) {
            if ((this.AddUserToGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddUserToGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/AddUserCollectionToGroup", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddUserCollectionToGroup(string groupName, System.Xml.XmlNode usersInfoXml) {
            this.Invoke("AddUserCollectionToGroup", new object[] {
                        groupName,
                        usersInfoXml});
        }
        
        /// <remarks/>
        public void AddUserCollectionToGroupAsync(string groupName, System.Xml.XmlNode usersInfoXml) {
            this.AddUserCollectionToGroupAsync(groupName, usersInfoXml, null);
        }
        
        /// <remarks/>
        public void AddUserCollectionToGroupAsync(string groupName, System.Xml.XmlNode usersInfoXml, object userState) {
            if ((this.AddUserCollectionToGroupOperationCompleted == null)) {
                this.AddUserCollectionToGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddUserCollectionToGroupOperationCompleted);
            }
            this.InvokeAsync("AddUserCollectionToGroup", new object[] {
                        groupName,
                        usersInfoXml}, this.AddUserCollectionToGroupOperationCompleted, userState);
        }
        
        private void OnAddUserCollectionToGroupOperationCompleted(object arg) {
            if ((this.AddUserCollectionToGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddUserCollectionToGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/AddUserToRole", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddUserToRole(string roleName, string userName, string userLoginName, string userEmail, string userNotes) {
            this.Invoke("AddUserToRole", new object[] {
                        roleName,
                        userName,
                        userLoginName,
                        userEmail,
                        userNotes});
        }
        
        /// <remarks/>
        public void AddUserToRoleAsync(string roleName, string userName, string userLoginName, string userEmail, string userNotes) {
            this.AddUserToRoleAsync(roleName, userName, userLoginName, userEmail, userNotes, null);
        }
        
        /// <remarks/>
        public void AddUserToRoleAsync(string roleName, string userName, string userLoginName, string userEmail, string userNotes, object userState) {
            if ((this.AddUserToRoleOperationCompleted == null)) {
                this.AddUserToRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddUserToRoleOperationCompleted);
            }
            this.InvokeAsync("AddUserToRole", new object[] {
                        roleName,
                        userName,
                        userLoginName,
                        userEmail,
                        userNotes}, this.AddUserToRoleOperationCompleted, userState);
        }
        
        private void OnAddUserToRoleOperationCompleted(object arg) {
            if ((this.AddUserToRoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddUserToRoleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/AddUserCollectionToRole", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddUserCollectionToRole(string roleName, System.Xml.XmlNode usersInfoXml) {
            this.Invoke("AddUserCollectionToRole", new object[] {
                        roleName,
                        usersInfoXml});
        }
        
        /// <remarks/>
        public void AddUserCollectionToRoleAsync(string roleName, System.Xml.XmlNode usersInfoXml) {
            this.AddUserCollectionToRoleAsync(roleName, usersInfoXml, null);
        }
        
        /// <remarks/>
        public void AddUserCollectionToRoleAsync(string roleName, System.Xml.XmlNode usersInfoXml, object userState) {
            if ((this.AddUserCollectionToRoleOperationCompleted == null)) {
                this.AddUserCollectionToRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddUserCollectionToRoleOperationCompleted);
            }
            this.InvokeAsync("AddUserCollectionToRole", new object[] {
                        roleName,
                        usersInfoXml}, this.AddUserCollectionToRoleOperationCompleted, userState);
        }
        
        private void OnAddUserCollectionToRoleOperationCompleted(object arg) {
            if ((this.AddUserCollectionToRoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddUserCollectionToRoleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/UpdateUserInfo", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateUserInfo(string userLoginName, string userName, string userEmail, string userNotes) {
            this.Invoke("UpdateUserInfo", new object[] {
                        userLoginName,
                        userName,
                        userEmail,
                        userNotes});
        }
        
        /// <remarks/>
        public void UpdateUserInfoAsync(string userLoginName, string userName, string userEmail, string userNotes) {
            this.UpdateUserInfoAsync(userLoginName, userName, userEmail, userNotes, null);
        }
        
        /// <remarks/>
        public void UpdateUserInfoAsync(string userLoginName, string userName, string userEmail, string userNotes, object userState) {
            if ((this.UpdateUserInfoOperationCompleted == null)) {
                this.UpdateUserInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateUserInfoOperationCompleted);
            }
            this.InvokeAsync("UpdateUserInfo", new object[] {
                        userLoginName,
                        userName,
                        userEmail,
                        userNotes}, this.UpdateUserInfoOperationCompleted, userState);
        }
        
        private void OnUpdateUserInfoOperationCompleted(object arg) {
            if ((this.UpdateUserInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateUserInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/RemoveUserFromSite", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveUserFromSite(string userLoginName) {
            this.Invoke("RemoveUserFromSite", new object[] {
                        userLoginName});
        }
        
        /// <remarks/>
        public void RemoveUserFromSiteAsync(string userLoginName) {
            this.RemoveUserFromSiteAsync(userLoginName, null);
        }
        
        /// <remarks/>
        public void RemoveUserFromSiteAsync(string userLoginName, object userState) {
            if ((this.RemoveUserFromSiteOperationCompleted == null)) {
                this.RemoveUserFromSiteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveUserFromSiteOperationCompleted);
            }
            this.InvokeAsync("RemoveUserFromSite", new object[] {
                        userLoginName}, this.RemoveUserFromSiteOperationCompleted, userState);
        }
        
        private void OnRemoveUserFromSiteOperationCompleted(object arg) {
            if ((this.RemoveUserFromSiteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveUserFromSiteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/RemoveUserCollectionFromSi" +
            "te", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveUserCollectionFromSite(System.Xml.XmlNode userLoginNamesXml) {
            this.Invoke("RemoveUserCollectionFromSite", new object[] {
                        userLoginNamesXml});
        }
        
        /// <remarks/>
        public void RemoveUserCollectionFromSiteAsync(System.Xml.XmlNode userLoginNamesXml) {
            this.RemoveUserCollectionFromSiteAsync(userLoginNamesXml, null);
        }
        
        /// <remarks/>
        public void RemoveUserCollectionFromSiteAsync(System.Xml.XmlNode userLoginNamesXml, object userState) {
            if ((this.RemoveUserCollectionFromSiteOperationCompleted == null)) {
                this.RemoveUserCollectionFromSiteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveUserCollectionFromSiteOperationCompleted);
            }
            this.InvokeAsync("RemoveUserCollectionFromSite", new object[] {
                        userLoginNamesXml}, this.RemoveUserCollectionFromSiteOperationCompleted, userState);
        }
        
        private void OnRemoveUserCollectionFromSiteOperationCompleted(object arg) {
            if ((this.RemoveUserCollectionFromSiteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveUserCollectionFromSiteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/RemoveUserFromWeb", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveUserFromWeb(string userLoginName) {
            this.Invoke("RemoveUserFromWeb", new object[] {
                        userLoginName});
        }
        
        /// <remarks/>
        public void RemoveUserFromWebAsync(string userLoginName) {
            this.RemoveUserFromWebAsync(userLoginName, null);
        }
        
        /// <remarks/>
        public void RemoveUserFromWebAsync(string userLoginName, object userState) {
            if ((this.RemoveUserFromWebOperationCompleted == null)) {
                this.RemoveUserFromWebOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveUserFromWebOperationCompleted);
            }
            this.InvokeAsync("RemoveUserFromWeb", new object[] {
                        userLoginName}, this.RemoveUserFromWebOperationCompleted, userState);
        }
        
        private void OnRemoveUserFromWebOperationCompleted(object arg) {
            if ((this.RemoveUserFromWebCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveUserFromWebCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/RemoveUserFromGroup", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveUserFromGroup(string groupName, string userLoginName) {
            this.Invoke("RemoveUserFromGroup", new object[] {
                        groupName,
                        userLoginName});
        }
        
        /// <remarks/>
        public void RemoveUserFromGroupAsync(string groupName, string userLoginName) {
            this.RemoveUserFromGroupAsync(groupName, userLoginName, null);
        }
        
        /// <remarks/>
        public void RemoveUserFromGroupAsync(string groupName, string userLoginName, object userState) {
            if ((this.RemoveUserFromGroupOperationCompleted == null)) {
                this.RemoveUserFromGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveUserFromGroupOperationCompleted);
            }
            this.InvokeAsync("RemoveUserFromGroup", new object[] {
                        groupName,
                        userLoginName}, this.RemoveUserFromGroupOperationCompleted, userState);
        }
        
        private void OnRemoveUserFromGroupOperationCompleted(object arg) {
            if ((this.RemoveUserFromGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveUserFromGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/RemoveUserCollectionFromGr" +
            "oup", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveUserCollectionFromGroup(string groupName, System.Xml.XmlNode userLoginNamesXml) {
            this.Invoke("RemoveUserCollectionFromGroup", new object[] {
                        groupName,
                        userLoginNamesXml});
        }
        
        /// <remarks/>
        public void RemoveUserCollectionFromGroupAsync(string groupName, System.Xml.XmlNode userLoginNamesXml) {
            this.RemoveUserCollectionFromGroupAsync(groupName, userLoginNamesXml, null);
        }
        
        /// <remarks/>
        public void RemoveUserCollectionFromGroupAsync(string groupName, System.Xml.XmlNode userLoginNamesXml, object userState) {
            if ((this.RemoveUserCollectionFromGroupOperationCompleted == null)) {
                this.RemoveUserCollectionFromGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveUserCollectionFromGroupOperationCompleted);
            }
            this.InvokeAsync("RemoveUserCollectionFromGroup", new object[] {
                        groupName,
                        userLoginNamesXml}, this.RemoveUserCollectionFromGroupOperationCompleted, userState);
        }
        
        private void OnRemoveUserCollectionFromGroupOperationCompleted(object arg) {
            if ((this.RemoveUserCollectionFromGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveUserCollectionFromGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/RemoveUserFromRole", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveUserFromRole(string roleName, string userLoginName) {
            this.Invoke("RemoveUserFromRole", new object[] {
                        roleName,
                        userLoginName});
        }
        
        /// <remarks/>
        public void RemoveUserFromRoleAsync(string roleName, string userLoginName) {
            this.RemoveUserFromRoleAsync(roleName, userLoginName, null);
        }
        
        /// <remarks/>
        public void RemoveUserFromRoleAsync(string roleName, string userLoginName, object userState) {
            if ((this.RemoveUserFromRoleOperationCompleted == null)) {
                this.RemoveUserFromRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveUserFromRoleOperationCompleted);
            }
            this.InvokeAsync("RemoveUserFromRole", new object[] {
                        roleName,
                        userLoginName}, this.RemoveUserFromRoleOperationCompleted, userState);
        }
        
        private void OnRemoveUserFromRoleOperationCompleted(object arg) {
            if ((this.RemoveUserFromRoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveUserFromRoleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/RemoveUserCollectionFromRo" +
            "le", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveUserCollectionFromRole(string roleName, System.Xml.XmlNode userLoginNamesXml) {
            this.Invoke("RemoveUserCollectionFromRole", new object[] {
                        roleName,
                        userLoginNamesXml});
        }
        
        /// <remarks/>
        public void RemoveUserCollectionFromRoleAsync(string roleName, System.Xml.XmlNode userLoginNamesXml) {
            this.RemoveUserCollectionFromRoleAsync(roleName, userLoginNamesXml, null);
        }
        
        /// <remarks/>
        public void RemoveUserCollectionFromRoleAsync(string roleName, System.Xml.XmlNode userLoginNamesXml, object userState) {
            if ((this.RemoveUserCollectionFromRoleOperationCompleted == null)) {
                this.RemoveUserCollectionFromRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveUserCollectionFromRoleOperationCompleted);
            }
            this.InvokeAsync("RemoveUserCollectionFromRole", new object[] {
                        roleName,
                        userLoginNamesXml}, this.RemoveUserCollectionFromRoleOperationCompleted, userState);
        }
        
        private void OnRemoveUserCollectionFromRoleOperationCompleted(object arg) {
            if ((this.RemoveUserCollectionFromRoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveUserCollectionFromRoleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetGroupCollectionFromSite" +
            "", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetGroupCollectionFromSite() {
            object[] results = this.Invoke("GetGroupCollectionFromSite", new object[0]);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetGroupCollectionFromSiteAsync() {
            this.GetGroupCollectionFromSiteAsync(null);
        }
        
        /// <remarks/>
        public void GetGroupCollectionFromSiteAsync(object userState) {
            if ((this.GetGroupCollectionFromSiteOperationCompleted == null)) {
                this.GetGroupCollectionFromSiteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGroupCollectionFromSiteOperationCompleted);
            }
            this.InvokeAsync("GetGroupCollectionFromSite", new object[0], this.GetGroupCollectionFromSiteOperationCompleted, userState);
        }
        
        private void OnGetGroupCollectionFromSiteOperationCompleted(object arg) {
            if ((this.GetGroupCollectionFromSiteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGroupCollectionFromSiteCompleted(this, new GetGroupCollectionFromSiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetGroupCollectionFromWeb", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetGroupCollectionFromWeb() {
            object[] results = this.Invoke("GetGroupCollectionFromWeb", new object[0]);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetGroupCollectionFromWebAsync() {
            this.GetGroupCollectionFromWebAsync(null);
        }
        
        /// <remarks/>
        public void GetGroupCollectionFromWebAsync(object userState) {
            if ((this.GetGroupCollectionFromWebOperationCompleted == null)) {
                this.GetGroupCollectionFromWebOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGroupCollectionFromWebOperationCompleted);
            }
            this.InvokeAsync("GetGroupCollectionFromWeb", new object[0], this.GetGroupCollectionFromWebOperationCompleted, userState);
        }
        
        private void OnGetGroupCollectionFromWebOperationCompleted(object arg) {
            if ((this.GetGroupCollectionFromWebCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGroupCollectionFromWebCompleted(this, new GetGroupCollectionFromWebCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetGroupCollectionFromRole" +
            "", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetGroupCollectionFromRole(string roleName) {
            object[] results = this.Invoke("GetGroupCollectionFromRole", new object[] {
                        roleName});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetGroupCollectionFromRoleAsync(string roleName) {
            this.GetGroupCollectionFromRoleAsync(roleName, null);
        }
        
        /// <remarks/>
        public void GetGroupCollectionFromRoleAsync(string roleName, object userState) {
            if ((this.GetGroupCollectionFromRoleOperationCompleted == null)) {
                this.GetGroupCollectionFromRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGroupCollectionFromRoleOperationCompleted);
            }
            this.InvokeAsync("GetGroupCollectionFromRole", new object[] {
                        roleName}, this.GetGroupCollectionFromRoleOperationCompleted, userState);
        }
        
        private void OnGetGroupCollectionFromRoleOperationCompleted(object arg) {
            if ((this.GetGroupCollectionFromRoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGroupCollectionFromRoleCompleted(this, new GetGroupCollectionFromRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetGroupCollectionFromUser" +
            "", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetGroupCollectionFromUser(string userLoginName) {
            object[] results = this.Invoke("GetGroupCollectionFromUser", new object[] {
                        userLoginName});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetGroupCollectionFromUserAsync(string userLoginName) {
            this.GetGroupCollectionFromUserAsync(userLoginName, null);
        }
        
        /// <remarks/>
        public void GetGroupCollectionFromUserAsync(string userLoginName, object userState) {
            if ((this.GetGroupCollectionFromUserOperationCompleted == null)) {
                this.GetGroupCollectionFromUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGroupCollectionFromUserOperationCompleted);
            }
            this.InvokeAsync("GetGroupCollectionFromUser", new object[] {
                        userLoginName}, this.GetGroupCollectionFromUserOperationCompleted, userState);
        }
        
        private void OnGetGroupCollectionFromUserOperationCompleted(object arg) {
            if ((this.GetGroupCollectionFromUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGroupCollectionFromUserCompleted(this, new GetGroupCollectionFromUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetGroupCollection", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetGroupCollection(System.Xml.XmlNode groupNamesXml) {
            object[] results = this.Invoke("GetGroupCollection", new object[] {
                        groupNamesXml});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetGroupCollectionAsync(System.Xml.XmlNode groupNamesXml) {
            this.GetGroupCollectionAsync(groupNamesXml, null);
        }
        
        /// <remarks/>
        public void GetGroupCollectionAsync(System.Xml.XmlNode groupNamesXml, object userState) {
            if ((this.GetGroupCollectionOperationCompleted == null)) {
                this.GetGroupCollectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGroupCollectionOperationCompleted);
            }
            this.InvokeAsync("GetGroupCollection", new object[] {
                        groupNamesXml}, this.GetGroupCollectionOperationCompleted, userState);
        }
        
        private void OnGetGroupCollectionOperationCompleted(object arg) {
            if ((this.GetGroupCollectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGroupCollectionCompleted(this, new GetGroupCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetGroupInfo", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetGroupInfo(string groupName) {
            object[] results = this.Invoke("GetGroupInfo", new object[] {
                        groupName});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetGroupInfoAsync(string groupName) {
            this.GetGroupInfoAsync(groupName, null);
        }
        
        /// <remarks/>
        public void GetGroupInfoAsync(string groupName, object userState) {
            if ((this.GetGroupInfoOperationCompleted == null)) {
                this.GetGroupInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGroupInfoOperationCompleted);
            }
            this.InvokeAsync("GetGroupInfo", new object[] {
                        groupName}, this.GetGroupInfoOperationCompleted, userState);
        }
        
        private void OnGetGroupInfoOperationCompleted(object arg) {
            if ((this.GetGroupInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGroupInfoCompleted(this, new GetGroupInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/AddGroup", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddGroup(string groupName, string ownerIdentifier, string ownerType, string defaultUserLoginName, string description) {
            this.Invoke("AddGroup", new object[] {
                        groupName,
                        ownerIdentifier,
                        ownerType,
                        defaultUserLoginName,
                        description});
        }
        
        /// <remarks/>
        public void AddGroupAsync(string groupName, string ownerIdentifier, string ownerType, string defaultUserLoginName, string description) {
            this.AddGroupAsync(groupName, ownerIdentifier, ownerType, defaultUserLoginName, description, null);
        }
        
        /// <remarks/>
        public void AddGroupAsync(string groupName, string ownerIdentifier, string ownerType, string defaultUserLoginName, string description, object userState) {
            if ((this.AddGroupOperationCompleted == null)) {
                this.AddGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddGroupOperationCompleted);
            }
            this.InvokeAsync("AddGroup", new object[] {
                        groupName,
                        ownerIdentifier,
                        ownerType,
                        defaultUserLoginName,
                        description}, this.AddGroupOperationCompleted, userState);
        }
        
        private void OnAddGroupOperationCompleted(object arg) {
            if ((this.AddGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/AddGroupToRole", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddGroupToRole(string roleName, string groupName) {
            this.Invoke("AddGroupToRole", new object[] {
                        roleName,
                        groupName});
        }
        
        /// <remarks/>
        public void AddGroupToRoleAsync(string roleName, string groupName) {
            this.AddGroupToRoleAsync(roleName, groupName, null);
        }
        
        /// <remarks/>
        public void AddGroupToRoleAsync(string roleName, string groupName, object userState) {
            if ((this.AddGroupToRoleOperationCompleted == null)) {
                this.AddGroupToRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddGroupToRoleOperationCompleted);
            }
            this.InvokeAsync("AddGroupToRole", new object[] {
                        roleName,
                        groupName}, this.AddGroupToRoleOperationCompleted, userState);
        }
        
        private void OnAddGroupToRoleOperationCompleted(object arg) {
            if ((this.AddGroupToRoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddGroupToRoleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/UpdateGroupInfo", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateGroupInfo(string oldGroupName, string groupName, string ownerIdentifier, string ownerType, string description) {
            this.Invoke("UpdateGroupInfo", new object[] {
                        oldGroupName,
                        groupName,
                        ownerIdentifier,
                        ownerType,
                        description});
        }
        
        /// <remarks/>
        public void UpdateGroupInfoAsync(string oldGroupName, string groupName, string ownerIdentifier, string ownerType, string description) {
            this.UpdateGroupInfoAsync(oldGroupName, groupName, ownerIdentifier, ownerType, description, null);
        }
        
        /// <remarks/>
        public void UpdateGroupInfoAsync(string oldGroupName, string groupName, string ownerIdentifier, string ownerType, string description, object userState) {
            if ((this.UpdateGroupInfoOperationCompleted == null)) {
                this.UpdateGroupInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateGroupInfoOperationCompleted);
            }
            this.InvokeAsync("UpdateGroupInfo", new object[] {
                        oldGroupName,
                        groupName,
                        ownerIdentifier,
                        ownerType,
                        description}, this.UpdateGroupInfoOperationCompleted, userState);
        }
        
        private void OnUpdateGroupInfoOperationCompleted(object arg) {
            if ((this.UpdateGroupInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateGroupInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/RemoveGroup", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveGroup(string groupName) {
            this.Invoke("RemoveGroup", new object[] {
                        groupName});
        }
        
        /// <remarks/>
        public void RemoveGroupAsync(string groupName) {
            this.RemoveGroupAsync(groupName, null);
        }
        
        /// <remarks/>
        public void RemoveGroupAsync(string groupName, object userState) {
            if ((this.RemoveGroupOperationCompleted == null)) {
                this.RemoveGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveGroupOperationCompleted);
            }
            this.InvokeAsync("RemoveGroup", new object[] {
                        groupName}, this.RemoveGroupOperationCompleted, userState);
        }
        
        private void OnRemoveGroupOperationCompleted(object arg) {
            if ((this.RemoveGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/RemoveGroupFromRole", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveGroupFromRole(string roleName, string groupName) {
            this.Invoke("RemoveGroupFromRole", new object[] {
                        roleName,
                        groupName});
        }
        
        /// <remarks/>
        public void RemoveGroupFromRoleAsync(string roleName, string groupName) {
            this.RemoveGroupFromRoleAsync(roleName, groupName, null);
        }
        
        /// <remarks/>
        public void RemoveGroupFromRoleAsync(string roleName, string groupName, object userState) {
            if ((this.RemoveGroupFromRoleOperationCompleted == null)) {
                this.RemoveGroupFromRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveGroupFromRoleOperationCompleted);
            }
            this.InvokeAsync("RemoveGroupFromRole", new object[] {
                        roleName,
                        groupName}, this.RemoveGroupFromRoleOperationCompleted, userState);
        }
        
        private void OnRemoveGroupFromRoleOperationCompleted(object arg) {
            if ((this.RemoveGroupFromRoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveGroupFromRoleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetRoleCollectionFromWeb", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetRoleCollectionFromWeb() {
            object[] results = this.Invoke("GetRoleCollectionFromWeb", new object[0]);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetRoleCollectionFromWebAsync() {
            this.GetRoleCollectionFromWebAsync(null);
        }
        
        /// <remarks/>
        public void GetRoleCollectionFromWebAsync(object userState) {
            if ((this.GetRoleCollectionFromWebOperationCompleted == null)) {
                this.GetRoleCollectionFromWebOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRoleCollectionFromWebOperationCompleted);
            }
            this.InvokeAsync("GetRoleCollectionFromWeb", new object[0], this.GetRoleCollectionFromWebOperationCompleted, userState);
        }
        
        private void OnGetRoleCollectionFromWebOperationCompleted(object arg) {
            if ((this.GetRoleCollectionFromWebCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRoleCollectionFromWebCompleted(this, new GetRoleCollectionFromWebCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetRoleCollectionFromGroup" +
            "", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetRoleCollectionFromGroup(string groupName) {
            object[] results = this.Invoke("GetRoleCollectionFromGroup", new object[] {
                        groupName});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetRoleCollectionFromGroupAsync(string groupName) {
            this.GetRoleCollectionFromGroupAsync(groupName, null);
        }
        
        /// <remarks/>
        public void GetRoleCollectionFromGroupAsync(string groupName, object userState) {
            if ((this.GetRoleCollectionFromGroupOperationCompleted == null)) {
                this.GetRoleCollectionFromGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRoleCollectionFromGroupOperationCompleted);
            }
            this.InvokeAsync("GetRoleCollectionFromGroup", new object[] {
                        groupName}, this.GetRoleCollectionFromGroupOperationCompleted, userState);
        }
        
        private void OnGetRoleCollectionFromGroupOperationCompleted(object arg) {
            if ((this.GetRoleCollectionFromGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRoleCollectionFromGroupCompleted(this, new GetRoleCollectionFromGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetRoleCollectionFromUser", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetRoleCollectionFromUser(string userLoginName) {
            object[] results = this.Invoke("GetRoleCollectionFromUser", new object[] {
                        userLoginName});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetRoleCollectionFromUserAsync(string userLoginName) {
            this.GetRoleCollectionFromUserAsync(userLoginName, null);
        }
        
        /// <remarks/>
        public void GetRoleCollectionFromUserAsync(string userLoginName, object userState) {
            if ((this.GetRoleCollectionFromUserOperationCompleted == null)) {
                this.GetRoleCollectionFromUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRoleCollectionFromUserOperationCompleted);
            }
            this.InvokeAsync("GetRoleCollectionFromUser", new object[] {
                        userLoginName}, this.GetRoleCollectionFromUserOperationCompleted, userState);
        }
        
        private void OnGetRoleCollectionFromUserOperationCompleted(object arg) {
            if ((this.GetRoleCollectionFromUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRoleCollectionFromUserCompleted(this, new GetRoleCollectionFromUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetRoleCollection", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetRoleCollection(System.Xml.XmlNode roleNamesXml) {
            object[] results = this.Invoke("GetRoleCollection", new object[] {
                        roleNamesXml});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetRoleCollectionAsync(System.Xml.XmlNode roleNamesXml) {
            this.GetRoleCollectionAsync(roleNamesXml, null);
        }
        
        /// <remarks/>
        public void GetRoleCollectionAsync(System.Xml.XmlNode roleNamesXml, object userState) {
            if ((this.GetRoleCollectionOperationCompleted == null)) {
                this.GetRoleCollectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRoleCollectionOperationCompleted);
            }
            this.InvokeAsync("GetRoleCollection", new object[] {
                        roleNamesXml}, this.GetRoleCollectionOperationCompleted, userState);
        }
        
        private void OnGetRoleCollectionOperationCompleted(object arg) {
            if ((this.GetRoleCollectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRoleCollectionCompleted(this, new GetRoleCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetRoleInfo", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetRoleInfo(string roleName) {
            object[] results = this.Invoke("GetRoleInfo", new object[] {
                        roleName});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetRoleInfoAsync(string roleName) {
            this.GetRoleInfoAsync(roleName, null);
        }
        
        /// <remarks/>
        public void GetRoleInfoAsync(string roleName, object userState) {
            if ((this.GetRoleInfoOperationCompleted == null)) {
                this.GetRoleInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRoleInfoOperationCompleted);
            }
            this.InvokeAsync("GetRoleInfo", new object[] {
                        roleName}, this.GetRoleInfoOperationCompleted, userState);
        }
        
        private void OnGetRoleInfoOperationCompleted(object arg) {
            if ((this.GetRoleInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRoleInfoCompleted(this, new GetRoleInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/AddRole", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddRole(string roleName, string description, int permissionMask) {
            this.Invoke("AddRole", new object[] {
                        roleName,
                        description,
                        permissionMask});
        }
        
        /// <remarks/>
        public void AddRoleAsync(string roleName, string description, int permissionMask) {
            this.AddRoleAsync(roleName, description, permissionMask, null);
        }
        
        /// <remarks/>
        public void AddRoleAsync(string roleName, string description, int permissionMask, object userState) {
            if ((this.AddRoleOperationCompleted == null)) {
                this.AddRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddRoleOperationCompleted);
            }
            this.InvokeAsync("AddRole", new object[] {
                        roleName,
                        description,
                        permissionMask}, this.AddRoleOperationCompleted, userState);
        }
        
        private void OnAddRoleOperationCompleted(object arg) {
            if ((this.AddRoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddRoleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/AddRoleDef", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddRoleDef(string roleName, string description, ulong permissionMask) {
            this.Invoke("AddRoleDef", new object[] {
                        roleName,
                        description,
                        permissionMask});
        }
        
        /// <remarks/>
        public void AddRoleDefAsync(string roleName, string description, ulong permissionMask) {
            this.AddRoleDefAsync(roleName, description, permissionMask, null);
        }
        
        /// <remarks/>
        public void AddRoleDefAsync(string roleName, string description, ulong permissionMask, object userState) {
            if ((this.AddRoleDefOperationCompleted == null)) {
                this.AddRoleDefOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddRoleDefOperationCompleted);
            }
            this.InvokeAsync("AddRoleDef", new object[] {
                        roleName,
                        description,
                        permissionMask}, this.AddRoleDefOperationCompleted, userState);
        }
        
        private void OnAddRoleDefOperationCompleted(object arg) {
            if ((this.AddRoleDefCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddRoleDefCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/UpdateRoleInfo", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateRoleInfo(string oldRoleName, string roleName, string description, int permissionMask) {
            this.Invoke("UpdateRoleInfo", new object[] {
                        oldRoleName,
                        roleName,
                        description,
                        permissionMask});
        }
        
        /// <remarks/>
        public void UpdateRoleInfoAsync(string oldRoleName, string roleName, string description, int permissionMask) {
            this.UpdateRoleInfoAsync(oldRoleName, roleName, description, permissionMask, null);
        }
        
        /// <remarks/>
        public void UpdateRoleInfoAsync(string oldRoleName, string roleName, string description, int permissionMask, object userState) {
            if ((this.UpdateRoleInfoOperationCompleted == null)) {
                this.UpdateRoleInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateRoleInfoOperationCompleted);
            }
            this.InvokeAsync("UpdateRoleInfo", new object[] {
                        oldRoleName,
                        roleName,
                        description,
                        permissionMask}, this.UpdateRoleInfoOperationCompleted, userState);
        }
        
        private void OnUpdateRoleInfoOperationCompleted(object arg) {
            if ((this.UpdateRoleInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateRoleInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/UpdateRoleDefInfo", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateRoleDefInfo(string oldRoleName, string roleName, string description, ulong permissionMask) {
            this.Invoke("UpdateRoleDefInfo", new object[] {
                        oldRoleName,
                        roleName,
                        description,
                        permissionMask});
        }
        
        /// <remarks/>
        public void UpdateRoleDefInfoAsync(string oldRoleName, string roleName, string description, ulong permissionMask) {
            this.UpdateRoleDefInfoAsync(oldRoleName, roleName, description, permissionMask, null);
        }
        
        /// <remarks/>
        public void UpdateRoleDefInfoAsync(string oldRoleName, string roleName, string description, ulong permissionMask, object userState) {
            if ((this.UpdateRoleDefInfoOperationCompleted == null)) {
                this.UpdateRoleDefInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateRoleDefInfoOperationCompleted);
            }
            this.InvokeAsync("UpdateRoleDefInfo", new object[] {
                        oldRoleName,
                        roleName,
                        description,
                        permissionMask}, this.UpdateRoleDefInfoOperationCompleted, userState);
        }
        
        private void OnUpdateRoleDefInfoOperationCompleted(object arg) {
            if ((this.UpdateRoleDefInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateRoleDefInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/RemoveRole", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveRole(string roleName) {
            this.Invoke("RemoveRole", new object[] {
                        roleName});
        }
        
        /// <remarks/>
        public void RemoveRoleAsync(string roleName) {
            this.RemoveRoleAsync(roleName, null);
        }
        
        /// <remarks/>
        public void RemoveRoleAsync(string roleName, object userState) {
            if ((this.RemoveRoleOperationCompleted == null)) {
                this.RemoveRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveRoleOperationCompleted);
            }
            this.InvokeAsync("RemoveRole", new object[] {
                        roleName}, this.RemoveRoleOperationCompleted, userState);
        }
        
        private void OnRemoveRoleOperationCompleted(object arg) {
            if ((this.RemoveRoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveRoleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetUserLoginFromEmail", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetUserLoginFromEmail(System.Xml.XmlNode emailXml) {
            object[] results = this.Invoke("GetUserLoginFromEmail", new object[] {
                        emailXml});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserLoginFromEmailAsync(System.Xml.XmlNode emailXml) {
            this.GetUserLoginFromEmailAsync(emailXml, null);
        }
        
        /// <remarks/>
        public void GetUserLoginFromEmailAsync(System.Xml.XmlNode emailXml, object userState) {
            if ((this.GetUserLoginFromEmailOperationCompleted == null)) {
                this.GetUserLoginFromEmailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserLoginFromEmailOperationCompleted);
            }
            this.InvokeAsync("GetUserLoginFromEmail", new object[] {
                        emailXml}, this.GetUserLoginFromEmailOperationCompleted, userState);
        }
        
        private void OnGetUserLoginFromEmailOperationCompleted(object arg) {
            if ((this.GetUserLoginFromEmailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserLoginFromEmailCompleted(this, new GetUserLoginFromEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetRolesAndPermissionsForC" +
            "urrentUser", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetRolesAndPermissionsForCurrentUser() {
            object[] results = this.Invoke("GetRolesAndPermissionsForCurrentUser", new object[0]);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetRolesAndPermissionsForCurrentUserAsync() {
            this.GetRolesAndPermissionsForCurrentUserAsync(null);
        }
        
        /// <remarks/>
        public void GetRolesAndPermissionsForCurrentUserAsync(object userState) {
            if ((this.GetRolesAndPermissionsForCurrentUserOperationCompleted == null)) {
                this.GetRolesAndPermissionsForCurrentUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRolesAndPermissionsForCurrentUserOperationCompleted);
            }
            this.InvokeAsync("GetRolesAndPermissionsForCurrentUser", new object[0], this.GetRolesAndPermissionsForCurrentUserOperationCompleted, userState);
        }
        
        private void OnGetRolesAndPermissionsForCurrentUserOperationCompleted(object arg) {
            if ((this.GetRolesAndPermissionsForCurrentUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRolesAndPermissionsForCurrentUserCompleted(this, new GetRolesAndPermissionsForCurrentUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetRolesAndPermissionsForS" +
            "ite", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetRolesAndPermissionsForSite() {
            object[] results = this.Invoke("GetRolesAndPermissionsForSite", new object[0]);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetRolesAndPermissionsForSiteAsync() {
            this.GetRolesAndPermissionsForSiteAsync(null);
        }
        
        /// <remarks/>
        public void GetRolesAndPermissionsForSiteAsync(object userState) {
            if ((this.GetRolesAndPermissionsForSiteOperationCompleted == null)) {
                this.GetRolesAndPermissionsForSiteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRolesAndPermissionsForSiteOperationCompleted);
            }
            this.InvokeAsync("GetRolesAndPermissionsForSite", new object[0], this.GetRolesAndPermissionsForSiteOperationCompleted, userState);
        }
        
        private void OnGetRolesAndPermissionsForSiteOperationCompleted(object arg) {
            if ((this.GetRolesAndPermissionsForSiteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRolesAndPermissionsForSiteCompleted(this, new GetRolesAndPermissionsForSiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetUserCollectionFromSiteCompletedEventHandler(object sender, GetUserCollectionFromSiteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserCollectionFromSiteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserCollectionFromSiteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetUserCollectionFromWebCompletedEventHandler(object sender, GetUserCollectionFromWebCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserCollectionFromWebCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserCollectionFromWebCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetAllUserCollectionFromWebCompletedEventHandler(object sender, GetAllUserCollectionFromWebCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllUserCollectionFromWebCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllUserCollectionFromWebCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetUserCollectionFromGroupCompletedEventHandler(object sender, GetUserCollectionFromGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserCollectionFromGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserCollectionFromGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetUserCollectionFromRoleCompletedEventHandler(object sender, GetUserCollectionFromRoleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserCollectionFromRoleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserCollectionFromRoleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetUserCollectionCompletedEventHandler(object sender, GetUserCollectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserCollectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserCollectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetUserInfoCompletedEventHandler(object sender, GetUserInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetCurrentUserInfoCompletedEventHandler(object sender, GetCurrentUserInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCurrentUserInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCurrentUserInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AddUserToGroupCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AddUserCollectionToGroupCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AddUserToRoleCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AddUserCollectionToRoleCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateUserInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void RemoveUserFromSiteCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void RemoveUserCollectionFromSiteCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void RemoveUserFromWebCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void RemoveUserFromGroupCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void RemoveUserCollectionFromGroupCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void RemoveUserFromRoleCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void RemoveUserCollectionFromRoleCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetGroupCollectionFromSiteCompletedEventHandler(object sender, GetGroupCollectionFromSiteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGroupCollectionFromSiteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetGroupCollectionFromSiteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetGroupCollectionFromWebCompletedEventHandler(object sender, GetGroupCollectionFromWebCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGroupCollectionFromWebCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetGroupCollectionFromWebCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetGroupCollectionFromRoleCompletedEventHandler(object sender, GetGroupCollectionFromRoleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGroupCollectionFromRoleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetGroupCollectionFromRoleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetGroupCollectionFromUserCompletedEventHandler(object sender, GetGroupCollectionFromUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGroupCollectionFromUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetGroupCollectionFromUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetGroupCollectionCompletedEventHandler(object sender, GetGroupCollectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGroupCollectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetGroupCollectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetGroupInfoCompletedEventHandler(object sender, GetGroupInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGroupInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetGroupInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AddGroupCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AddGroupToRoleCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateGroupInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void RemoveGroupCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void RemoveGroupFromRoleCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetRoleCollectionFromWebCompletedEventHandler(object sender, GetRoleCollectionFromWebCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRoleCollectionFromWebCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRoleCollectionFromWebCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetRoleCollectionFromGroupCompletedEventHandler(object sender, GetRoleCollectionFromGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRoleCollectionFromGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRoleCollectionFromGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetRoleCollectionFromUserCompletedEventHandler(object sender, GetRoleCollectionFromUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRoleCollectionFromUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRoleCollectionFromUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetRoleCollectionCompletedEventHandler(object sender, GetRoleCollectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRoleCollectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRoleCollectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetRoleInfoCompletedEventHandler(object sender, GetRoleInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRoleInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRoleInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AddRoleCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AddRoleDefCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateRoleInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateRoleDefInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void RemoveRoleCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetUserLoginFromEmailCompletedEventHandler(object sender, GetUserLoginFromEmailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserLoginFromEmailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserLoginFromEmailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetRolesAndPermissionsForCurrentUserCompletedEventHandler(object sender, GetRolesAndPermissionsForCurrentUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRolesAndPermissionsForCurrentUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRolesAndPermissionsForCurrentUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetRolesAndPermissionsForSiteCompletedEventHandler(object sender, GetRolesAndPermissionsForSiteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRolesAndPermissionsForSiteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRolesAndPermissionsForSiteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591